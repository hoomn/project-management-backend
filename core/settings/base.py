"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", False) == "True"

# Google reCAPTCHA Configuration
RECAPTCHA_SITE_KEY = os.getenv("RECAPTCHA_SITE_KEY")
RECAPTCHA_SECRET_KEY = os.getenv("RECAPTCHA_SECRET_KEY")
RECAPTCHA_REQUIRED_SCORE = 0.85

# The model to use to represent a User.
# See https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#auth-custom-user
AUTH_USER_MODEL = "accounts.User"


# Djoser configuration
DJOSER = {
    "EMAIL_FRONTEND_PROTOCOL": os.getenv("EMAIL_FRONTEND_PROTOCOL"),
    "EMAIL_FRONTEND_DOMAIN": os.getenv("EMAIL_FRONTEND_DOMAIN"),
    # Name of a unique field in User model to be used as id for /users/<id>/ endpoints.
    # "USER_ID_FIELD": "uuid",
    "LOGIN_FIELD": "email",
    "PASSWORD_RESET_CONFIRM_URL": "auth/password/reset/confirm/{uid}/{token}",
    "SET_PASSWORD_RETYPE": True,
    "PASSWORD_RESET_CONFIRM_RETYPE": True,
    "SEND_CONFIRMATION_EMAIL": False,
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": False,
    "SERIALIZERS": {
        "user": "accounts.serializers.CustomUserSerializer",
        "current_user": "accounts.serializers.CustomUserSerializer",
        # "user_create_password_retype": "accounts.serializers.CustomUserCreatePasswordRetypeSerializer",
        "password_reset": "accounts.serializers.CustomSendEmailResetSerializer",
        # "password_reset_confirm_retype": "accounts.serializers.CustomPasswordResetConfirmRetypeSerializer",
    },
    "PERMISSIONS": {
        # Public views
        "user_create": ["accounts.permissions.DenyAll"],
        "token_create": ["rest_framework.permissions.AllowAny"],
        "password_reset": ["rest_framework.permissions.AllowAny"],
        "password_reset_confirm": ["rest_framework.permissions.AllowAny"],
        # Authenticated user only views
        "user": ["rest_framework.permissions.IsAuthenticated"],
        # Current user only views
        "set_password": ["accounts.permissions.CurrentUser"],
        "token_destroy": ["accounts.permissions.CurrentUser"],
        # Forbidden views
        "activation": ["accounts.permissions.DenyAll"],
        "user_list": ["accounts.permissions.DenyAll"],
        "user_delete": ["accounts.permissions.DenyAll"],
        "set_username": ["accounts.permissions.DenyAll"],
        "username_reset": ["accounts.permissions.DenyAll"],
        "username_reset_confirm": ["accounts.permissions.DenyAll"],
    },
    "EMAIL": {
        "password_reset": "accounts.email.CustomPasswordResetEmail",
    },
}


# Global settings for REST framework API
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
}


# A JSON Web Token authentication plugin for the Django REST Framework
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    # Replaces the default `TokenObtainPairSerializer` with a custom implementation.
    "TOKEN_OBTAIN_SERIALIZER": "accounts.serializers.CustomTokenObtainPairSerializer",
    "UPDATE_LAST_LOGIN": True,
}


PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# Application definition

INSTALLED_APPS = [
    "unfold",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "djoser",
    "corsheaders",
    "accounts",
    "notifications",
    "pm",
]

MIDDLEWARE = [
    "core.middlewares.HealthCheckMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply@pm.com")

UNFOLD = {
    "ENVIRONMENT": "core.utils.environment_callback",
}


ALLOWED_MIME_TYPES = [
    # PDF
    "application/pdf",
    # Image
    "image/jpeg",
    "image/png",
    "image/gif",
    "image/webp",
    # Text
    "text/plain",
    "text/csv",
    "application/rtf",
    # .docx
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    # .xlsx
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
]
